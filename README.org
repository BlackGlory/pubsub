* PubSub
一个受[[https://patchbay.pub/][patchbay]], [[https://smee.io/][smee.io]], [[https://github.com/sensiblecodeio/hookbot][hookbot]]启发的Web友好的自托管ad-hoc微服务,
提供基于 HTTP, SSE 和 WebSocket 的 PubSub 功能,
带有基于token和名单的访问控制策略,
支持JSON Schema.

受原理所限, 此服务不能实现消息的可靠传递(reliable delivery), 也无法重发消息.
因此当遭遇网络故障时, 消息可能会丢失.

所有URL都采用了反射性的CORS, 不提供针对 =Origin= 的访问控制策略.

** Quickstart
- sse-cat: https://github.com/BlackGlory/sse-cat
- websocat: https://github.com/vi/websocat

#+BEGIN_SRC sh
# 运行
docker run --detach --publish 8080:8080 blackglory/pubsub

# 打开第一个终端
sse-cat http://localhost:8080/pubsub/hello-world

# 打开第二个终端
websocat ws://localhost:8080/pubsub/hello-world

# 打开第三个终端
curl http://localhost:8080/pubsub/hello-world --data 'hello'
#+END_SRC

** Install
*** 从源代码运行
可以使用环境变量 =PUBSUB_HOST= 和 =PUBSUB_PORT= 决定服务器监听的地址和端口, 默认值为localhost和8080.

#+BEGIN_SRC sh
git clone https://github.com/BlackGlory/pubsub
cd pubsub
yarn install
yarn build
yarn --silent start
#+END_SRC

*** Docker

#+BEGIN_SRC sh
docker run \
  --detach \
  --publish 8080:8080 \
  blackglory/pubsub
#+END_SRC

**** 从源代码构建
#+BEGIN_SRC sh
git clone https://github.com/BlackGlory/pubsub
cd pubsub
yarn install
yarn docker:build
#+END_SRC

**** Recipes
***** 公开服务器
****** docker-compose.yml
#+BEGIN_SRC yaml
version: '3.8'

services:
  pubsub:
    image: 'blackglory/pubsub'
    restart: always
    volumes:
      - 'pubsub-data:/data'
    ports:
      - '8080:8080'

volumes:
  pubsub-data:
#+END_SRC

***** 私人服务器
****** docker-compose.yml
#+BEGIN_SRC yaml
version: '3.8'

services:
  pubsub:
    image: 'blackglory/pubsub'
    restart: always
    environment:
      - PUBSUB_ADMIN_PASSWORD=password
      - PUBSUB_TOKEN_BASED_ACCESS_CONTROL=true
      - PUBSUB_READ_TOKEN_REQUIRED=true
      - PUBSUB_WRITE_TOKEN_REQUIRED=true
    volumes:
      - 'pubsub-data:/data'
    ports:
      - '8080:8080'

volumes:
  pubsub-data:
#+END_SRC

** API
所有API中的id都需要满足此正则表达式: `^[a-zA-Z0-9\.\-_]{0,255}$`

*** Public
**** publish
=POST /pubsub/<id>=

往特定频道发布消息, 所有订阅此频道的客户端都会收到消息.
id用于标识频道.

如果开启基于token的访问控制, 则可能需要在Querystring提供具有write权限的token:
=POST /pubsub/<id>?token=<token>=

***** Example
****** curl
#+BEGIN_SRC sh
curl \
  --data 'message' \
  "http://localhost:8080/pubsub/$id"
#+END_SRC

****** JavaScript
#+BEGIN_SRC js
fetch(`http://localhost:8080/pubsub/${id}`, {
  method: 'POST'
, body: 'message'
})
#+END_SRC

**** subscribe via Server-Sent Events(SSE)
=GET /pubsub/<id>=

通过SSE订阅特定频道.
id用于标识频道.

使用SSE时, 建议服务器提供 HTTP/2 协议的反向代理.

如果开启基于token的访问控制, 则可能需要在Querystring提供具有read权限的token:
=/pubsub/<id>?token=<token>=

***** Example
****** sse-cat
#+BEGIN_SRC sh
sse-cat "http://localhost:8080/pubsub/$id"
#+END_SRC

****** JavaScript
#+BEGIN_SRC js
const es = new EventSource(`http://localhost:8080/pubsub/$id`)
es.addEventListener('message', event => {
  console.log(event.data)
})
#+END_SRC

**** subscribe via WebSocket
=WS /pubsub/<id>=

通过WebSocket订阅特定频道.
id用于标识频道.

如果开启基于token的访问控制, 则可能需要在Querystring提供具有read权限的token:
=/pubsub/<id>?token=<token>=

注: 如果可以通过SSE订阅, 则推荐使用SSE订阅.
SSE在HTTP/2协议下可以多路复用, 而WebSocket会给每个连接单独开启新的连接.

***** Example
****** websocat
#+BEGIN_SRC sh
websocat "ws://localhost:8080/pubsub/$id"
#+END_SRC

****** JavaScript
#+BEGIN_SRC js
const ws = new WebSocket('ws://localhost:8080')
ws.addEventListener('message', event => {
    console.log(event.data);
})
#+END_SRC

**** 统计信息
=GET /stats=

输出JSON:
#+BEGIN_SRC ts
{
  memoryUsage: NodeJS.MemoryUsage
  cpuUsage: NodeJS.CpuUsage
  resourceUsage: NodeJS.ResourceUsage
}
#+END_SRC

***** Example
****** curl
#+BEGIN_SRC sh
curl 'http://localhost:8080/stats'
#+END_SRC

****** JavaScript
#+BEGIN_SRC js
await fetch('http://localhost:8080/stats').then(res => res.json())
#+END_SRC

*** Private
**** JSON Schema验证
通过设置环境变量 =PUBSUB_JSON_VALIDATION=true= 可开启publish的JSON Schema验证功能.
任何带有 =Content-Type: application/json= 的请求都会被验证,
即使没有设置JSON Schema, 也会拒绝不合法的JSON文本.
JSON验证仅用于验证, 不会重新序列化消息, 因此subscribe得到的消息会与publish发送的消息相同.

在开启验证功能的情况下, 通过环境变量 =PUBSUB_DEFAULT_JSON_SCHEMA= 可设置默认的JSON Schema,
该验证仅对带有 =Content-Type: application/json= 的请求有效.

通过设置环境变量 =PUBSUB_JSON_PAYLOAD_ONLY=true=,
可以强制enqueue只接受带有 =Content-Type: application/json= 的请求.
此设置在未开启JSON Schema验证的情况下也有效, 但在这种情况下服务器能够接受不合法的JSON.

***** 单独为id设置JSON Schema
可单独为id设置JSON Schema, 被设置的id将仅接受`Content-Type: application/json`请求.

****** 获取所有具有JSON Schema的频道id
=GET /api/pubsub-with-json-schema=

获取所有具有JSON Schema的频道id, 返回由JSON表示的字符串数组 =string[]=.

******* Example
******** curl
#+BEGIN_SRC sh
curl \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/api/pubsub-with-json-schema"
#+END_SRC

******** fetch
#+BEGIN_SRC js
await fetch('http://localhost:8080/api/pubsub-with-json-schema', {
  headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
}).then(res => res.json())
#+END_SRC

****** 获取JSON Schema
=GET /api/pubsub/<id>/json-schema=

******* Example
******** curl
#+BEGIN_SRC sh
curl \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/api/pubsub/$id/json-schema"
#+END_SRC

******** fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/api/pubsub/${id}/json-schema`, {
  headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
}).then(res => res.json())
#+END_SRC

****** 设置JSON Schema
=PUT /api/pubsub/<id>/json-schema=

******* Example
******** curl
#+BEGIN_SRC sh
curl \
  --request PUT \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  --header "Content-Type: application/json" \
  --data "$JSON_SCHEMA" \
  "http://localhost:8080/api/pubsub/$id/jsonschema"
#+END_SRC

******** fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/api/pubsub/${id}/json-schema`, {
  method: 'PUT'
, headers: {
    'Authorization': `Bearer ${adminPassword}`
    'Content-Type': 'application/json'
  }
, body: JSON.stringify(jsonSchema)
})
#+END_SRC

****** 移除JSON Schema
=DELETE /api/pubsub/<id>/json-schema=

******* Example
******** curl
#+BEGIN_SRC sh
curl \
  --request DELETE \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/api/pubsub/$id/json-schema"
#+END_SRC

******** fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/api/pubsub/${id}/json-schema`, {
  method: 'DELETE'
, headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
})
#+END_SRC

**** 访问控制
PubSub提供两种访问控制策略, 可以一并使用.

所有访问控制API都使用基于口令的Bearer Token Authentication.
口令需通过环境变量 =PUBSUB_ADMIN_PASSWORD= 进行设置.

访问控制规则是通过[[https://www.sqlite.org/wal.html][WAL模式]]的SQLite3持久化的, 开启访问控制后,
服务器的吞吐量和响应速度会受到硬盘性能的影响.

已经打开的连接不会受到新的访问控制规则的影响.

***** 基于名单的访问控制
通过设置环境变量 =PUBSUB_LIST_BASED_ACCESS_CONTROL= 开启基于名单的访问控制:
- =whitelist=
  启用基于频道白名单的访问控制, 只有在名单内的频道允许被访问.
- =blacklist=
  启用基于频道黑名单的访问控制, 只有在名单外的频道允许被访问.

****** 黑名单
******* 获取黑名单
=GET /api/blacklist=

获取位于黑名单中的所有频道id, 返回JSON表示的字符串数组 =string[]=.

******** Example
********* curl
#+BEGIN_SRC sh
curl \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/api/blacklist"
#+END_SRC

********* fetch
#+BEGIN_SRC js
await fetch('http://localhost:8080/api/blacklist', {
  headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
}).then(res => res.json())
#+END_SRC

******* 添加黑名单
=PUT /api/blacklist/<id>=

将特定频道加入黑名单.

******** Example
********* curl
#+BEGIN_SRC sh
curl \
  --request PUT \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/api/blacklist/$id"
#+END_SRC

********* fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/api/blacklist/${id}`, {
  method: 'PUT'
, headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
})
#+END_SRC

******* 移除黑名单
=DELETE /api/blacklist/<id>=

将特定频道从黑名单中移除.

******** Example
********* curl
#+BEGIN_SRC sh
curl \
  --request DELETE \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/api/blacklist/$id"
#+END_SRC

********* fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/api/blacklist/${id}`, {
  method: 'DELETE'
, headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
})
#+END_SRC

****** 白名单
******* 获取白名单
=GET /api/whitelist=

获取位于黑名单中的所有频道id, 返回JSON表示的字符串数组`string[]`.

******* Example
******** curl
#+BEGIN_SRC sh
curl \
  --header "Authorization: Bearer $ADMIM_PASSWORD" \
  "http://localhost:8080/api/whitelist"
#+END_SRC

******** fetch
#+BEGIN_SRC js
await fetch('http://localhost:8080/api/whitelist', {
  headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
}).then(res => res.json())
#+END_SRC

******* 添加白名单
=PUT /api/whitelist/<id>=

将特定频道加入白名单.

******** Example
********* curl
#+BEGIN_SRC sh
curl \
  --request PUT \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/api/whitelist/$id"
#+END_SRC

********* fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/api/whitelist/${id}`, {
  method: 'PUT'
, headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
})
#+END_SRC

******* 移除白名单
=DELETE /api/whitelist/<id>=

将特定频道从白名单中移除.

******** Example
********* curl
#+BEGIN_SRC sh
curl \
  --request DELETE \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/api/whitelist/$id"
#+END_SRC

********* fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/api/whitelist/${id}`, {
  method: 'DELETE'
, headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
})
#+END_SRC

***** 基于token的访问控制
对token的要求: =^[a-zA-Z0-9\.\-_]{1,256}$=

通过设置环境变量 =PUBSUB_TOKEN_BASED_ACCESS_CONTROL=true= 开启基于token的访问控制.

基于token的访问控制将根据消息队列的token access policy决定其访问规则.
可通过环境变量 =PUBSUB_WRITE_TOKEN_REQUIRED=, =PUBSUB_READ_TOKEN_REQUIRED= 设置相关默认值,
未设置情况下为 =false=.

一个消息队列可以有多个token, 每个token可以单独设置write和read权限, 不同消息队列的token不共用.

基于token的访问控制作出以下假设
- token的传输过程是安全的
- token难以被猜测
- token的意外泄露可以被迅速处理

****** 获取所有具有token策略的频道id
=GET /api/pubsub-with-token-policies=

获取所有具有token策略的频道id, 返回由JSON表示的字符串数组 =string[]=.

******* Example
******** curl
#+BEGIN_SRC sh
curl \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/api/pubsub-with-token-policies"
#+END_SRC

******** fetch
#+BEGIN_SRC js
await fetch('http://localhost:8080/api/pubsub-with-token-policies')
#+END_SRC

****** 获取特定频道的token策略
=GET /api/pubsub/<id>/token-policies=

返回JSON:
#+BEGIN_SRC ts
{
  writeTokenRequired: boolean | null
  readTokenRequired: boolean | null
}
#+END_SRC
=null= 代表沿用相关默认值.

******* Example
******** curl
#+BEGIN_SRC sh
curl \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/api/pubsub/$id/token-policies"
#+END_SRC

******** fetch
#+BEGIN_SRC js
await fethc(`http://localhost:8080/api/pubsub/${id}/token-policies`, {
  headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
}).then(res => res.json())
#+END_SRC

****** 设置token策略
=PUT /api/pubsub/<id>/token-policies/write-token-required=
=PUT /api/pubsub/<id>/token-policies/read-token-required=

Payload必须是一个布尔值.

******* Example
******** curl
#+BEGIN_SRC sh
curl \
  --request PUT \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  --header "Content-Type: application/json" \
  --data "$WRITE_TOKEN_REQUIRED" \
  "http://localhost:8080/api/pubsub/$id/token-policies/write-token-required"
#+END_SRC

******** fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/api/pubsub/${id}/token-policies/write-token-required`, {
  method: 'PUT'
, headers: {
    'Authorization': `Bearer ${adminPassword}`
  , 'Content-Type': 'application/json'
  }
, body: JSON.stringify(writeTokenRequired)
})
#+END_SRC

****** 移除token策略
=DELETE /api/pubsub/<id>/token-policies/write-token-required=
=DELETE /api/pubsub/<id>/token-policies/read-token-required=

******* Example
******** curl
#+BEGIN_SRC sh
curl \
  --request DELETE \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/api/pubsub/$id/token-policies/write-token-required"
#+END_SRC

******** fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/api/pubsub/${id}/token-policies/write-token-required`, {
  method: 'DELETE'
, headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
})
#+END_SRC

****** 获取所有具有token的频道id
=GET /api/pubsub-with-tokens=

获取所有具有token的频道id, 返回由JSON表示的字符串数组 =string[]=.

******* Example
******** curl
#+BEGIN_SRC sh
curl \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/api/pubsub-with-tokens"
#+END_SRC

******** fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/api/pubsub-with-tokens`, {
  headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
}).then(res => res.json())
#+END_SRC

****** 获取特定频道的所有token信息
=GET /api/pubsub/<id>/tokens=

获取特定频道的所有token信息, 返回JSON表示的token信息数组
=Array<{ token: string, wirte: boolean, read: boolean }>=.

******* Example
******** curl
#+BEGIN_SRC sh
curl \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/api/pubsub/$id/tokens"
#+END_SRC

******** fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/api/pubsub/${id}/tokens`, {
  headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
}).then(res => res.json())
#+END_SRC

****** 为特定频道的token设置write权限
=PUT /api/pubsub/<id>/tokens/<token>/write=

添加/更新token, 为token设置write权限.

******* Example
******** curl
#+BEGIN_SRC sh
curl \
  --request PUT \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/api/pubsub/$id/tokens/$token/write"
#+END_SRC

******** fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/api/pubsub/${id}/tokens/$token/write`, {
  method: 'PUT'
, headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
})
#+END_SRC

****** 取消特定频道的token的write权限
=DELETE /api/pubsub/<id>/tokens/<token>/write=

取消token的write权限.

******* Example
******** curl
#+BEGIN_SRC sh
curl \
  --request DELETE \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/api/pubsub/$id/tokens/$token/write"
#+END_SRC

******** fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/api/pubsub/${id}/tokens/${token}/write`, {
  method: 'DELETE'
, headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
})
#+END_SRC

****** 为特定频道的token设置read权限
=PUT /api/pubsub/<id>/tokens/<token>/read=

添加/更新token, 为token设置read权限.

******* Example
******** curl
#+BEGIN_SRC sh
curl \
  --request PUT \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/api/pubsub/$id/tokens/$token/read"
#+END_SRC

******** fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/api/pubsub/${id}/tokens/$token/read`, {
  method: 'PUT'
, headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
})
#+END_SRC

****** 取消特定频道的token的read权限
=DELETE /api/pubsub/<id>/tokens/<token>/read=

取消token的read权限.

******* Example
******** curl
#+BEGIN_SRC sh
curl \
  --request DELETE \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/api/pubsub/$id/tokens/$token/read"
#+END_SRC

******** fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/api/pubsub/${id}/tokens/${token}/read`, {
  method: 'DELETE'
, headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
})
#+END_SRC

** HTTP/2
PubSub支持HTTP/2, 以多路复用反向代理时的连接, 可通过设置环境变量 =PUBSUB_HTTP2=true= 开启.

此HTTP/2支持不提供从HTTP/1.1自动升级的功能, 亦不提供HTTPS.
因此, 在本地curl里进行测试时, 需要开启 =--http2-prior-knowledge= 选项.

** 限制Payload大小
设置环境变量 =PUBSUB_PAYLOAD_LIMIT= 可限制服务接受的单个请求的Payload字节数, 默认值为1048576(1MB).

设置环境变量 =PUBSUB_PUBLISH_PAYLOAD_LIMIT= 可限制publish接受的单个请求Payload字节数,
默认值继承自 =PUBSUB_PAYLOAD_LIMIT=.

** Webhook
PubSub的publish端点可用于Webhook,
但它不会转发请求头, IP地址等信息, 因此无法用于需要这些信息的场景.

在此项目的早期阶段, 曾设计过一个 =/pubsub/<id>/webhook= 端点,
该端点会生成包含必要信息的新JSON.
但随即便发现它无法与基于JSON Schema的JSON验证进行整合, 也无法防止伪造消息.
解决这些问题需要单独为Webhook创建新的数据库表和API接口,
这为PubSub添加了过多的职责, 严重增加了项目的复杂性, 因此该设计被放弃.

建议的解决方案是为Webhook单独创建HTTP服务器, 生成包含所需信息的请求, 将其发送给PubSub.
在这种情况下, 可以通过添加具有publish权限的token的方式, 防止伪造请求.
